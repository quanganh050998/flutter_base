// **************************************************************************
// FloorGenerator
// **************************************************************************

// ignore: avoid_classes_with_only_static_members
class $FloorAccLocalDatabase {
  /// Creates a database builder for a persistent database.
  /// Once a database is built, you should keep a reference to it and re-use it.
  static _$AccLocalDatabaseBuilder databaseBuilder(String name) =>
      _$AccLocalDatabaseBuilder(name);

  /// Creates a database builder for an in memory database.
  /// Information stored in an in memory database disappears when the process is killed.
  /// Once a database is built, you should keep a reference to it and re-use it.
  static _$AccLocalDatabaseBuilder inMemoryDatabaseBuilder() =>
      _$AccLocalDatabaseBuilder(null);
}

class _$AccLocalDatabaseBuilder {
  _$AccLocalDatabaseBuilder(this.name);

  final String? name;

  final List<Migration> _migrations = [];

  Callback? _callback;

  /// Adds migrations to the builder.
  _$AccLocalDatabaseBuilder addMigrations(List<Migration> migrations) {
    _migrations.addAll(migrations);
    return this;
  }

  /// Adds a database [Callback] to the builder.
  _$AccLocalDatabaseBuilder addCallback(Callback callback) {
    _callback = callback;
    return this;
  }

  /// Creates the database and initializes it.
  Future<AccLocalDatabase> build() async {
    final path = name != null
        ? await sqfliteDatabaseFactory.getDatabasePath(name!)
        : ':memory:';
    final database = _$AccLocalDatabase();
    database.database = await database.open(
      path,
      _migrations,
      _callback,
    );
    return database;
  }
}

class _$AccLocalDatabase extends AccLocalDatabase {
  _$AccLocalDatabase([StreamController<String>? listener]) {
    changeListener = listener ?? StreamController<String>.broadcast();
  }

  PlayerProfileDao? _accountDaoInstance;

  Future<sqflite.Database> open(
    String path,
    List<Migration> migrations, [
    Callback? callback,
  ]) async {
    final databaseOptions = sqflite.OpenDatabaseOptions(
      version: 1,
      onConfigure: (database) async {
        await database.execute('PRAGMA foreign_keys = ON');
        await callback?.onConfigure?.call(database);
      },
      onOpen: (database) async {
        await callback?.onOpen?.call(database);
      },
      onUpgrade: (database, startVersion, endVersion) async {
        await MigrationAdapter.runMigrations(
            database, startVersion, endVersion, migrations);

        await callback?.onUpgrade?.call(database, startVersion, endVersion);
      },
      onCreate: (database, version) async {
        await database.execute(
            'CREATE TABLE IF NOT EXISTS `profile_player` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `name` TEXT NOT NULL, `age` TEXT NOT NULL, `description` TEXT NOT NULL, `phone` TEXT)');

        await callback?.onCreate?.call(database, version);
      },
    );
    return sqfliteDatabaseFactory.openDatabase(path, options: databaseOptions);
  }

  @override
  PlayerProfileDao get accountDao {
    return _accountDaoInstance ??= _$PlayerProfileDao(database, changeListener);
  }
}

class _$PlayerProfileDao extends PlayerProfileDao {
  _$PlayerProfileDao(
    this.database,
    this.changeListener,
  )   : _queryAdapter = QueryAdapter(database),
        _profilePlayerModelInsertionAdapter = InsertionAdapter(
            database,
            'profile_player',
            (ProfilePlayerModel item) => <String, Object?>{
                  'id': item.id,
                  'name': item.name,
                  'age': item.age,
                  'description': item.description,
                  'phone': item.phone
                });

  final sqflite.DatabaseExecutor database;

  final StreamController<String> changeListener;

  final QueryAdapter _queryAdapter;

  final InsertionAdapter<ProfilePlayerModel>
      _profilePlayerModelInsertionAdapter;

  @override
  Future<List<ProfilePlayerModel>> getPlayerProfile() async {
    return _queryAdapter.queryList('SELECT * FROM profile_player',
        mapper: (Map<String, Object?> row) => ProfilePlayerModel(
            id: row['id'] as int?,
            name: row['name'] as String,
            age: row['age'] as String,
            description: row['description'] as String,
            phone: row['phone'] as String?));
  }

  @override
  Future<ProfilePlayerModel?> getAccount(int id) async {
    return _queryAdapter.query('SELECT * FROM profile_player WHERE id=?1',
        mapper: (Map<String, Object?> row) => ProfilePlayerModel(
            id: row['id'] as int?,
            name: row['name'] as String,
            age: row['age'] as String,
            description: row['description'] as String,
            phone: row['phone'] as String?),
        arguments: [id]);
  }

  @override
  Future<void> deleteAccount() async {
    await _queryAdapter.queryNoReturn('DELETE FROM profile_player');
  }

  @override
  Future<ProfilePlayerModel?> updateAccounts(
    int id,
    String name,
    String age,
    String description,
    String phone,
  ) async {
    return _queryAdapter.query(
        'UPDATE profile_player SET name =?2, age =?3,description =?4,phone =?5 WHERE id=?1',
        mapper: (Map<String, Object?> row) => ProfilePlayerModel(id: row['id'] as int?, name: row['name'] as String, age: row['age'] as String, description: row['description'] as String, phone: row['phone'] as String?),
        arguments: [id, name, age, description, phone]);
  }

  @override
  Future<int> insertAccount(ProfilePlayerModel profilePlayerModel) {
    return _profilePlayerModelInsertionAdapter.insertAndReturnId(
        profilePlayerModel, OnConflictStrategy.abort);
  }
}
